[A2C]

객체검출기 구축
 - 학습 라벨링(오픈소스)
 - 학습 불가환경 => Colab 클라우드 환경 내 학습 진행

쉘 서브프로세스로 오픈소스 포팅(인자 전달, 오픈소스의 맹점 - 모듈기반의 활용방식 한계)
 - 프로세스 분기
	1. 트레이닝 - 구현 중
		- 실시간 탐지를 위한 오픈소스 파일 상 알고리즘 구축
	2. 테스팅 - 구현 전

CNN 학습모델에 의한 실시간 입력 이미지 상태추론 및 전처리
 - ROI 설정 및 CNN 모델 학습
 - 쓰레기 상태 이미지 값 플래그 변수활용 전처리
 - 알고리즘 수정(반복 프로세스 제거)에 의한 지연 감축

게임 제어
 - keyboard 라이브러리 활용 게임 플레이

추론 직후 해당 데이터 Actor-Critic 모델 학습 입력
 - Gradient Vanishing(오픈소스의 맹점 - 블랙박스)
 - Definitive Prob에 의한 Actor 업데이트 식 한계 => 프레임워크 내 log_softmax 함수로 해결

텐서보드 포팅
 - 텐서보드 실행 디렉토리 기준으로 logdir이 상대경로에 의해 발생
 - 스칼라면 스칼라값을 write해줘야 값 확인 가능
 - --bind_all 옵션을 통해 외부접근 허용 + 인바운드 규칙생성 + 외부에서 IP+PORT로 접근

 이종환경 연동 간 메모리 초과문제
 - 1-Ep당 서브프로세스 On-Off로 메모리 반환메커니즘 구현

 타겟환경 내 렉 문제
 - 전이학습 아이디어 차용을 통해 유사환경 내 에이전트 사전학습 => 하이퍼파라미터 적정선 파악
 - 1-Ep당 학습 하이퍼파라미터 저장(에포크, 엡실론, 엡실론차감폭, 학습률, 노드 수)
 - 10-Ep당 게임인스턴스 리부팅
 - 50-Ep당 타겟환경 리부팅

 학습 불안정
 - TD(0) => TD(N) **TD(0)는 불안정, MC는 극솟값 탈출불가능성 및 학습속도 느림
 - 레이어 별 학습률 차별화(최적화 함수구현, 고려 중)
 - 수치적 직관성을 띄지 않는 신경망의 입력 즉, 추상화의 개념이 수치화 된 입력값은 학습이 어렵다(거의 불가하다)
 - 이미지 패턴입력을 수용하는 신경망의 입력층은 단순 전결합층이 아닌 패턴인식에 강한 Conv-net이 하나의 방법론이 될 수 있다
 - 따라서, 이번에는 이례적으로 학습의 속력을 내기위한 방편으로서 임의적 추상화한 입력값을 넣어줬지만 일반적인 상황에서는 해석이 가미되지않은 자연상태를 넣는 것이 효과적일 것이다.

 N-Step 그래디언트 중복문제
 - N-step 1회 연산 이후, 배치 내 신경망출력에 의해 발생한 변수들에는 갱신이전 네트워크의 확률분포의 역전파연산에 의한 기울기 잔상 남음
 - Advantage, Q_value, back_prop에 대한 연산 직전에 필요변수(신경망 출력)를 생성하여 이를 인자로 전달

 실시간 제어문제
 - Real-time control을 위한 방법론 : 특정 시점에서의 탐지이미지 캡쳐 및 순차행동시퀀스 사전생성입력(환경정보 이용)
 - 빠른 처리에 의한 행동씹힘현상 방지 → 안정성 도모용 행동시행 지연
 - 짧은 텀에 의한 쓰레기 탐지이미지 → 탐지지연생성(버퍼방식이 아닌 실시간 탐지방식)


------------------------------------------------------------------

[A3C]

 통신 제어
 - 불완전 전송패킷 버리기(대용량의 경우, 더욱이 빈번함)

 병행성 제어
 - 뮤텍스 락에 의한 듀얼 소켓 제어
